#!/usr/bin/env python2
# -*-coding:UTF-8 -*

import ConfigParser
import gnupg, shutil
from functools import wraps
from flask.ext.script import Manager
from flask import Flask, render_template, request, flash, redirect, url_for, abort, jsonify
from flask.ext.bootstrap import Bootstrap
from flask.ext.login import LoginManager, login_user, logout_user, login_required, current_user
from flask.ext.mail import Mail, Message
from sqlalchemy import desc, update
import models
import form_class

#Login_manager (session)
login_manager = LoginManager()
login_manager.session_protection = 'strong'

# Parsing Conf File #
configfile = 'config/config.cfg'
cfg = ConfigParser.ConfigParser()
cfg.read(configfile)

# Flask app initialisation, bootstrap, manager, email, etc. #
app = Flask(__name__)

manager = Manager(app)
mail = Mail(app)
login_manager.init_app(app)
bootstrap = Bootstrap(app)
app.config['SECRET_KEY'] = cfg.get("Secret", "wtf_secret_key")
# app.config['SERVER_NAME'] = "www.circl.lu:443"
# app.config['APPLICATION_ROOT'] = '/cve-portal'


# SMTP email config
app.config['MAIL_SERVER'] = cfg.get('SMTP', 'server')
app.config['MAIL_PORT'] = cfg.get('SMTP', 'port')
app.config['MAIL_USE_TLS'] = cfg.get('SMTP', 'tls')
app.config['DEFAULT_MAIL_SENDER'] = cfg.get('SMTP', 'sender')
# Init admin
app.config['PORTAL_ADMIN'] = cfg.get('ADMIN', 'god')


def send_email(to, subject, template, **kwargs):
    msg = Message(subject, recipients=[to], sender='cve-portal@circl.lu')
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    return mail.send(msg)


def permission_required(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.can(permission):
                abort(403)
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def admin_required(f):
    return permission_required(models.Permission.ADMINISTER)(f)

################
#### ROUTES ####
################

req_endpoint = ['unconfirmed', 'logout', 'confirm']


@app.before_request
def before_request():
    if current_user.is_authenticated() and not current_user.confirmed and request.endpoint not in req_endpoint:
        return redirect(url_for('unconfirmed'))


@login_manager.user_loader
def load_user(user_id):
    return models.User.query.get(int(user_id))


@app.route('/user/<id>')
def user(id):
    user = models.User.query.filter_by(id=id).first()
    return render_template('user.html', user=user)


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template("index.html")


@app.route('/register', methods=['GET', 'POST'])
def register():
    # gpg = gnupg.GPG(homedir='./gpg/')
    form = form_class.RegistrationForm()
    if form.validate_on_submit():
        # ki = gpg.import_keys(form.pgp.data)
        user = models.User(email=form.email.data,
                           name=form.name.data,
                           affiliation=form.affiliation.data,
                           pgp=form.pgp.data,
                           password=form.password.data,
                           fingerprint='#fingerprint')  # FIXME: Fingerprinting
        models.db.session.add(user)
        models.db.session.commit()
        # HOTFIX:
        shutil.rmtree('./gpg/')

        token = user.generate_confirmation_token()
        send_email(user.email,
                   'CVE-PORTAL -- Account Confirmation',
                   '/emails/confirm',
                   user=user,
                   token=token)
        flash('A confirmation email has been sent to you by email.')
        return redirect('/login')
    return render_template("auth/register.html", form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = form_class.LoginForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            flash('You are now logged')
            return redirect(request.args.get("next") or url_for("user",
                                                                id=current_user.id))
        flash('Wrong email/password')
    return render_template('auth/login.html', form=form)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out')
    return redirect('/')


@app.route('/confirm')
@login_required
def resend_confirmation():
    token = current_user.generate_confirmation_token()
    send_email(current_user.email,
               'CVE-PORTAL -- Account Confirmation',
               '/emails/confirm',
               user=current_user,
               token=token)
    flash('A new confirmation email has been sent to you by email.')
    return redirect(url_for('index'))


@app.route('/confirm/<token>')
@login_required
def confirm(token):
    if current_user.confirmed:
        return redirect(url_for('index'))
    if current_user.confirm(token):
        flash('You have confirmed your account. Thanks !')
    else:
        flash('The confirmation link is invalid or has expired.')
    return redirect(url_for('index'))


@app.route('/unconfirmed')
def unconfirmed():
    if current_user.is_anonymous() or current_user.confirmed:
        return redirect(url_for('index'))
    return render_template('auth/unconfirmed.html')


@app.route('/change_password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = form_class.ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            models.db.session.add(current_user)
            models.db.session.commit()
            flash('Your password had been updated.')
            return redirect(url_for('index'))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)


@app.route('/reset_pwd', methods=['GET', 'POST'])
def password_reset_request():
    if not current_user.is_anonymous():
        return redirect(url_for('index'))
    form = form_class.PasswordResetRequestForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.generate_reset_token()
            send_email(user.email,
                       'CVE-PORTAL -- Reset Password Request',
                       '/emails/password_reset',
                       user=user,
                       token=token,
                       next=request.args.get('next'))
            flash('An email with instructions to reset your password has been sent to you.')
            return redirect(url_for('login'))
    return render_template('auth/reset_password.html', form=form)


@app.route('/change_email', methods=['GET', 'POST'])
@login_required
def change_email_request():
    form = form_class.ChangeEmailForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.password.data):
            new_email = form.email.data
            token = current_user.generate_email_change_token(new_email)
            send_email(new_email,
                       'CVE-PORTAL -- Confirm your email address',
                       '/emails/change_email',
                       user=current_user,
                       token=token)
            flash('An email with instructions to confirm your new email address has been sent to you.')
            return redirect(url_for('index'))
        else:
            flash('Invalid email or password.')
    return render_template("auth/change_email.html", form=form)


@app.route('/change_email/<token>')
@login_required
def change_email(token):
    if current_user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('index'))


@app.route('/reset/<token>', methods=['GET', 'POST'])
def password_reset(token):
    if not current_user.is_anonymous():
        return redirect(url_for('index'))
    form = form_class.PasswordResetForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user is None:
            return redirect(url_for('index'))
        if user.reset_password(token, form.password.data):
            flash('Your password has been updated.')
            return redirect(url_for('login'))
        else:
            return redirect(url_for('index'))
    return render_template('auth/reset_password.html', form=form)


@app.route('/select', methods=['POST'])
def select():
    id = request.json[0]['id']
    return redirect(url_for('admin_home', id=id))


@app.route('/admin', methods=['GET', 'POST'])
@login_required
@admin_required
def admin_home():
    # FIXME: NO UNDERSTANDABLE PROBLEM
    userid = request.args.get('id')
    selected_user = models.User.query.filter_by(id=userid).first()

    form = form_class.RegistrationForm()
    updateform = form_class.UpdateUserForm(obj=selected_user)
    deleteform = form_class.DeleteUserForm(obj=selected_user)

    # ================ CREATE USER ================= #
    if form.validate_on_submit():
        user = models.User(email=form.email.data,
                           name=form.name.data,
                           affiliation=form.affiliation.data,
                           pgp=form.pgp.data,
                           password=form.password.data,
                           fingerprint='#fingerprint')
        # FIXME: GPG Fingerprinting
        models.db.session.add(user)
        models.db.session.commit()
        flash('User successfully created.')
        return redirect(url_for('admin_home'))

    # ================ UPDATE USER ================= #
    elif updateform.validate_on_submit():
        selected_user.email = updateform.email.data
        selected_user.name = updateform.name.data
        selected_user.affiliation = updateform.affiliation.data
        selected_user.pgp = updateform.pgp.data
        # FIXME: GPG Fingerprinting
        selected_user.fingerprint = '#fingerprint'
        selected_user.confirmed = updateform.confirmed.data
        selected_user.role = models.Role.query.get(updateform.role.data)

        models.db.session.add(selected_user)
        models.db.session.commit()
        flash('User successfully updated')
        return redirect(url_for('user', id=selected_user.id))

    # ================ DELETE USER ================= #
    elif deleteform.validate_on_submit():
        models.db.session.delete(selected_user)
        models.db.session.commit()
        flash('User successfully deleted')
        return redirect(url_for('admin_home'))

    return render_template("admin_home.html",
                           form=form,
                           updateform=updateform,
                           deleteform=deleteform)


@app.route('/userjson', methods=['GET', 'POST'])
@login_required
@admin_required
def userjson():
    jusers = []
    dusers = {}
    dic = {}

    limit = request.args.get('limit')
    offset = request.args.get('offset')
    sort = request.args.get('sort')
    order = request.args.get('order')

    if order == 'desc':
        user_list = models.User.query.order_by(desc(sort)).limit(limit).offset(offset).all()
    else:
        user_list = models.User.query.order_by(sort).limit(limit).offset(offset).all()

    num = models.User.query.count()

    for user in user_list:
        dusers = {'id': user.id,
                  'name': user.name,
                  'email': user.email,
                  'affiliation': user.affiliation,
                  'pgp': user.fingerprint,
                  'confirmed': user.confirmed,
                  'role_id': (models.Role.query.filter_by(id=user.role_id).first()).name
                  }
        print dusers
        jusers.append(dusers)

    dic['total'] = num
    dic['rows'] = jusers
    return jsonify(dic)


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500


@app.errorhandler(403)
def forbidden(e):
    return render_template('403.html'), 403


if __name__ == "__main__":
    manager.run()
