#!/usr/bin/env python2
# -*-coding:UTF-8 -*

import ConfigParser
from flask import Flask, current_app
from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.login import UserMixin, AnonymousUserMixin
from flask.ext.bcrypt import Bcrypt
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer

# Parsing Conf File #
configfile = 'config/config.cfg'
cfg = ConfigParser.ConfigParser()
cfg.read(configfile)

# Flask app, bootstrap etc. #
app = Flask(__name__)
app.config['SECRET_KEY'] = cfg.get("Secret", "wtf_secret_key")

#Bcrypt
bcrypt = Bcrypt(app)

db_type = cfg.get('Database', 'type')
db_user = cfg.get('Database', 'user')
db_pwd = cfg.get('Database', 'password')
db_hostname = cfg.get('Database', 'hostname')
db_name = cfg.get('Database', 'db_name')

app.config['SQLALCHEMY_DATABASE_URI'] = db_type+'://'+db_user+':'+db_pwd+'@'+db_hostname+'/'+db_name
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True

db = SQLAlchemy(app)

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True, index=True)
    email = db.Column(db.String(64), unique=True, index=True)
    password_hash = db.Column(db.String(128))
    affiliation = db.Column(db.String(64), nullable=True)
    pgp = db.Column(db.Text, nullable=True)
    confirmed = db.Column(db.Boolean, default=False)

    @property
    def password(self):
        raise AttributeError('password is not a readable attribute')

    @password.setter
    def password(self, password):
        self.password_hash = bcrypt.generate_password_hash(password)

    def verify_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)

    def generate_confirmation_token(self, expiration=3600):
        s = Serializer(current_app.config['SECRET_KEY'], expiration)
        return s.dumps({'confirm': self.id})

    def confirm(self, token):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token)
        except:
            return False
        if data.get('confirm') != self.id:
            return False
        self.confirmed = True
        db.session.add(self)
        db.session.commit()
        return True

    def generate_reset_token(self, expiration=3600):
        s = Serializer(current_app.config['SECRET_KEY'], expiration)
        return s.dumps({'reset': self.id})

    def reset_password(self, token, new_password):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token)
        except:
            return False
        if data.get('reset') != self.id:
            return False
        self.password = new_password
        db.session.add(self)
        return True


class AnonymousUser(AnonymousUserMixin):
    def is_administrator(self):
        return False
