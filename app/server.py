#!/usr/bin/env python2
# -*-coding:UTF-8 -*

import ConfigParser
from flask.ext.script import Manager
from flask import Flask, render_template, request, flash, redirect, url_for
from flask.ext.bootstrap import Bootstrap
from flask.ext.login import LoginManager, login_user, logout_user, login_required, current_user
from flask.ext.mail import Mail, Message

import models
import form_class

#Login_manager (session)
login_manager = LoginManager()
login_manager.session_protection = 'strong'

# Parsing Conf File #
configfile = 'config/config.cfg'
cfg = ConfigParser.ConfigParser()
cfg.read(configfile)

# Flask app initialisation, bootstrap, manager, email, etc. #
app = Flask(__name__)
manager = Manager(app)
mail = Mail(app)
login_manager.init_app(app)
bootstrap = Bootstrap(app)
app.config['SECRET_KEY'] = cfg.get("Secret", "wtf_secret_key")
#app.config['SERVER_NAME'] = "www.circl.lu:443"
#app.config['APPLICATION_ROOT'] = '/cve-portal'

# SMTP email config
app.config['MAIL_SERVER'] = cfg.get('SMTP', 'server')
app.config['MAIL_PORT'] = cfg.get('SMTP', 'port')
app.config['MAIL_USE_TLS'] = cfg.get('SMTP', 'tls')
app.config['DEFAULT_MAIL_SENDER'] = cfg.get('SMTP', 'sender')


def send_email(to, subject, template, **kwargs):
    msg = Message(subject, recipients=[to], sender='cve-portal@circl.lu')
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    return mail.send(msg)

################
#### ROUTES ####
################


@login_manager.user_loader
def load_user(user_id):
    return models.User.query.get(int(user_id))


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template("index.html")


@app.route('/register', methods=['GET', 'POST'])
def register():
    form = form_class.RegistrationForm()
    if form.validate_on_submit():
        user = models.User(email=form.email.data,
                name=form.name.data,
                affiliation=form.affiliation.data,
                pgp=form.pgp.data,
                password=form.password.data)
        models.db.session.add(user)
        models.db.session.commit()
        token = user.generate_confirmation_token()
        send_email(user.email, 'CVE-PORTAL -- Account Confirmation', '/emails/confirm', user=user, token=token)
        flash('A confirmation email has been sent to you by email.')
        return redirect('/login')
    return render_template("auth/register.html", form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = form_class.LoginForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            flash('You are now logged')
            #TeSt
            #token = user.generate_confirmation_token()
            #send_email(user.email, 'CVE-PORTAL -- Confirmation', '/emails/confirm', user=user, token=token)
            return redirect(request.args.get("next") or url_for("index"))
        flash('Wrong email/password')
    return render_template('auth/login.html', form=form)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out')
    return redirect('/')


@app.route('/confirm/<token>')
@login_required
def confirm(token):
    if current_user.confirmed:
        return redirect(url_for('index'))
    if current_user.confirm(token):
        flash('You have confirmed your account. Thanks !')
    else:
        flash('The confirmation link is invalid or has expired.')
    return redirect(url_for('index'))


@app.route('/change_password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = form_class.ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            models.db.session.add(current_user)
            models.db.session.commit()
            flash('Your password had been updated.')
            return redirect(url_for('index'))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)


@app.route('/reset_pwd', methods=['GET', 'POST'])
def password_reset_request():
    if not current_user.is_anonymous():
        return redirect(url_for('index'))
    form = form_class.PasswordResetRequestForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.generate_reset_token()
            send_email(user.email, 'CVE-PORTAL -- Reset Password Request', '/emails/password_reset', user=user, token=token, next=request.args.get('next'))
            flash('An email with instructions to reset your password has been sent to you.')
            return redirect(url_for('login'))
    return render_template('auth/reset_password.html', form=form)


@app.route('/change_email', methods=['GET', 'POST'])
@login_required
def change_email_request():
    form = form_class.ChangeEmailForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.password.data):
            new_email = form.email.data
            token = current_user.generate_email_change_token(new_email)
            send_email(new_email, 'CVE-PORTAL -- Confirm your email address', '/emails/change_email', user=current_user, token=token)
            flash('An email with instructions to confirm your new email address has been sent to you.')
            return redirect(url_for('index'))
        else:
            flash('Invalid email or password.')
    return render_template("auth/change_email.html", form=form)


@app.route('/change_email/<token>')
@login_required
def change_email(token):
    if current_user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('index'))


@app.route('/reset/<token>', methods=['GET', 'POST'])
def password_reset(token):
    if not current_user.is_anonymous():
        return redirect(url_for('index'))
    form = form_class.PasswordResetForm()
    if form.validate_on_submit():
        user = models.User.query.filter_by(email=form.email.data).first()
        if user is None:
            return redirect(url_for('index'))
        if user.reset_password(token, form.password.data):
            flash('Your password has been updated.')
            return redirect(url_for('login'))
        else:
            return redirect(url_for('index'))
    return render_template('auth/reset_password.html', form=form)


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500


@app.route('/user')
def user():
    user_agent = request.headers.get('User-Agent')
    return "<h1>Hello %s !</h1>" % user_agent

if __name__ == "__main__":
    #app.run(host='127.0.0.1', port=5001, threaded=True, debug=True)
    manager.run()
