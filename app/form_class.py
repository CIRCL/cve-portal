#!/usr/bin/env python2
# -*-coding:UTF-8 -*

# WebForms #
from flask.ext.wtf import Form
from wtforms import StringField, SubmitField, TextAreaField, PasswordField, ValidationError, BooleanField
from wtforms.validators import Required, Email, Length, Regexp, EqualTo, Optional
import models

class LoginForm(Form):
    email = StringField('Email', validators=[Required(), Length(1, 64),
        Email()])
    password = PasswordField('Password', validators=[Required()])
    remember_me = BooleanField('Keep me logged in')
    submit = SubmitField('Log In')


class RegistrationForm(Form):
    name = StringField('Name', validators=[Required(),
        Length(1, 64),
        Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0,
            'Username must have only letters, numbers, dorts or underscores.')])
    email = StringField('Email', validators=[Required(),
        Email(), Length(1, 64)])
    password = PasswordField('Password', validators=[Required(),
        EqualTo('password2', message='Passwords must match.')])
    password2 = PasswordField('Confirm password', validators=[Required()])
    affiliation = StringField('Affiliation', validators=[Optional()])
    pgp = TextAreaField('PGP Key', validators=[Optional()])
    submit = SubmitField('Register')

    def validate_email(self, field):
        if models.User.query.filter_by(email=field.data).first():
            raise ValidationError('Email already registered.')

    def validate_username(self, field):
        if models.User.query.filter_by(name=field.data).first():
            raise ValidationError('Username already in use.')

    def validate_pgp(self, field):
        if models.User.query.filter_by(pgp=field.data).first():
            raise ValidationError('PGP already in use.')

class ChangePasswordForm(Form):
    old_password = PasswordField('Old password', validators=[Required()])
    password = PasswordField('New password', validators=[
        Required(), EqualTo('password2', message='Passwords must match')])
    password2 = PasswordField('Confirm new password', validators=[Required()])
    submit = SubmitField('Update Password')

class PasswordResetRequestForm(Form):
    email = StringField('Email', validators=[Required(), Length(1, 64), Email()])
    submit = SubmitField('Reset Password')

class PasswordResetForm(Form):
    email = StringField('Email', validators=[Required(), Length(1, 64), Email()])
    password = PasswordField('New Password', validators=[Required(), EqualTo('password2', message='Passwords must match')])
    password2 = PasswordField('Confirm password', validators=[Required()])
    submit = SubmitField('Reset Password')

    def validate_email(self, field):
        if models.User.query.filter_by(email=field.data).first() is None:
            raise ValidationError('Unknown email address.')
